[{"content":"بسم الله الرحمن الرحيم، الحمد لله الذي علم بالقلم، علم الإنسان مالم يعلم والصلاة والسلام على خير معلم الناس الخير محمد أما بعد:\nMuhammed Essa:  فيديو: مسار مايكروتك لمهندسي الشبكات. MTCNA - Mikrotik. Mikrotik - MTCRE training.  Ahmed PC:  MTCNA - Mikrotik. Mikrotik - MTCRE training. من أين أبدأ وكيف أبدأ في الشبكات. إدارة جهاز المايكروتك من خلال سطر الاوامر. دورة كتابة الأكواد أو السكربتات فى الميكروتك.  منوع:  حمد العبسي: MikroTik Routers مايكروتك. أحمد عزيز: دورة مايكروتك Api..   « لقاح الهِمَّة العالية: النية الصحيحة، فإذا اجتمعا بلغ العبد غاية المراد »\n ابن القيم رحمه الله [الفوائد].   ","permalink":"https://abotyim.github.io/ar/posts/resources/mikrotik/","summary":"هي شركة معروفة عالميًا براوتر مايكروتك الشركة ذات أصول لاتيفية، وتقوم بتصنيع تجهيزات شبكات الحاسوب، وتبيع منتجات الشبكات اللاسلكية والموجهات أو ما يطلق عليها الراوتر. نشأت هذه الشركة في العام 1995 من أجل المنافسة في سوق شبكات الحاسوب الناشئة.","title":"مصادر لتعلم مايكروتك Mikrotik"},{"content":"بسم الله الرحمن الرحيم، الحمد لله الذي علم بالقلم، علم الإنسان مالم يعلم والصلاة والسلام على خير معلم الناس الخير محمد أما بعد:\npfSense:  pfSense شرح بالعربي. pfSense By Eng-Abdallah Mousa - Arabic. المهندس أحمد: شرح Firewall PFsense. المهندس أحمد: PFsense Real Scenario. حمد العبسي: pfSense FireWall. SALAMI-TECH : Pfsense. المهندس عبد الله موسى: Pfsense.  OPNSense:  حمد العبسي: OPNSense Firewall.   « لا ينبغي للعاقل أن يُرى إلا ساعيًا في تحصيل حسنة لمعاده أو درهم لمعاشه »\n ","permalink":"https://abotyim.github.io/ar/posts/resources/firewall/","summary":"مصادر عربية لتعلم جدار الحماية pfSense و OPNSense.","title":"مصادر لتعلم OPNSense \u0026 pfSense"},{"content":"بسم الله الرحمن الرحيم، الحمد لله الذي علم بالقلم، علم الإنسان مالم يعلم والصلاة والسلام على خير معلم الناس الخير محمد أما بعد:\nالمصادر المرئية:  محمد عيسى: دورة Git. Devops Arabi: Git - بالعربي. Ahmad Ezzeir: Git. منصة سطر: Git 101. Never Git Stuck. Mohammed Gh: Learn Git \u0026amp; GitHub in Arabic. Algorithm Academy: learn Git in Arabic.   Flex Courses: دورة إدارة نسخ البرمجة باستخدام git - مدفوعة.    المصادر المقروءة:  خوارزميون: المبرمجون وإدارة الشيفرات البرمجية Git. ملهم: أسئلة وأجوبة حول git. بندر: شرح أساسيات استخدام Git الجزء الأول. بندر: شرح أساسيات استخدام Git الجزء الثاني. عبير: ماهو Git ؟ وماهو github ؟   « قال النبي صلى الله عليه وسلم: اللهم إني أعوذ بك من العجز والكسل »\n رواه البخاري ومسلم.   ","permalink":"https://abotyim.github.io/ar/posts/resources/git/","summary":"برنامج لتعقب التغييرات على الملفات، وإدارة الشيفرات البرمجية.","title":"مصادر لتعلم Git"},{"content":"بسم الله الرحمن الرحيم، الحمد لله الذي علم بالقلم، علم الإنسان مالم يعلم والصلاة والسلام على خير معلم الناس الخير محمد أما بعد:\nالمصادر المرئية:  Kubernetes in Arabic من Ziyaad Qasem. Kubernetes and cloud native apps. Kubernetes in Arabic (With Salem) GDGMENA: مقدمة إلى تقنية الحاويات بال Kubernates. Docker and Kubernetes. Kubernetes بالعربي.  المصادر المقروءة:  حسوب: مدخل إلى Kubernetes. حسوب: تعلم أساسيات Kubernetes. حسوب: نظام كوبيرنتس Kubernetes وكيفية عمله. حسوب: مدخل إلى Helm مدير حزم Kubernetes.  قنوات اليوتيوب:  Kubernetes بالعربي  مجتمعات التلغرام:  Kubernetes بالعربي.   « إني لأمقت الرجل أراه فارغًا ليس في شيء من عمل دنيا ولا آخرة »\n الصحابي الجليل: عبدالله بن مسعود رضي الله عنه   ","permalink":"https://abotyim.github.io/ar/posts/resources/kubernetes/","summary":"تعد Kubernetes أو k8s حلاً مفتوح المصدر يعمل على التشغيل الآلي لنشر التطبيقات الموضوعة في حاويات وتوسيع نطاقها ومراقبتها.","title":"مصادر لتعلم تقنية الـ Kubernetes"},{"content":"بسم الله الرحمن الرحيم، الحمد لله الذي علم بالقلم، علم الإنسان مالم يعلم والصلاة والسلام على خير معلم الناس الخير محمد أما بعد:\nالمصادر المرئية:  محمد عيسى:   دورة فيدورا للمبتدئين CentOS 7 Server RHEL7 RedHat - RHCSA RHCE 7 RedHat Security Enhanced Linux لتوزيعات ريدهات بالعربية  فتحي العامري:   سطر أوامر لينكس دورة أوبنتو Ubuntu  مصطفى حمودة:   Linux System Administration OpenStack  سالم يسلم:   تثبيت OpenStack مع Yggdrasil. تثبيت وإعداد Yggdrasil لتخطي CGNAT.  محمد الدسوقي:   Containerization Thoughts Ansible Administration Course  منوع:   RHCE 8 Complete Course in Arabic لكيرولس خليل Linux Certified System Administrator 8 (Arabic) Linux Troubleshooting in Arabic آلاء زيدان Red Hat Enterprise Linux 7 (Admin 3) RH254 By Eng-Abeer Hosni أتمتة العمل بإستخدام Ansible لمحمد النجدي. Ansible Capsules بالعربي لوليد حسين. arab Devops: Ansible in Arabic. ansible-playbook شرح. أكادمية حسوب: Ansible. دورة تعلم نظام اللينكس للمهندس نادر دورة أساسيات لينكس من تكناوي دوت نت KVM NFTables Jenkins بالعربي Jenkins in arabic (with Salem) FlexCourses: دورة إدارة أنظمة لينكس Linux مدفوعة. محمد عيسى: حجز واستضافة مواقع. محمد عيسى: دورة DevOps. linux distributions reviews مراجعات  المصادر المقروءة:  كتاب سطر أوامر لينكس كتاب دليل إدارة خواديم أوبنتو 14.04 كتاب الإدارة المتقدمة لجنو/لينكس كتاب أوبنتو ببساطة كتاب دليل المستخدم في ليبر أوفيس  مواقع ويب:  وادي التقنية جنو/لينكس لينكس العرب عالم لينكس العربي أسس لينكس اليوم مجتمع لينكس في حسوب مدونة لينكس التقنية مجتمع أسس.  قنوات اليوتيوب:  Linuxtopia I\u0026rsquo;m Linux Alaa Zidan Arab Linux Community Shako Mako Tech شكو ماكو عرب جنو/لينكس Gnu Tux zer0err0r مفاتيح الحوسبة ITSoft عالم لينكس العربي محمد بيصار.  مجتمعات التلغرام:  مجموعة جنو/لينكس إتحاد مجموعات غنو/لينكس والبرمجيات الحرة مجموعة مجتمع لينكس العربي مجموعة مستخدمي البرمجيات المفتوحة مجموعة مجتمع أُسُس مجموعة مهووسو جنو Gnu Geeks قناة مهووسو جنو Gnu Geeks قناة GNUTUX قناة عالم لينكس العربي   « كفى بِحفظِ وَقتكَ عن فضول الإنشغال بالناس مغنمًا »\n حفظ الوقت لفضيلة الشيخ محمد المختار الشنقيطي   ","permalink":"https://abotyim.github.io/ar/posts/resources/linux/","summary":"GNU/Linux هو نظام تشغيل حر ومفتوح المصدر، منتشر بشكل واسع، يستخدم في الحواسيب الشخصية والخوادم والحواسيب العملاقة والأجهزة المحمولة والمضمنة.","title":"مصادر لتعلم نظام التشغيل جنو لينكس"},{"content":"بسم الله الرحمن الرحيم، الحمد لله الذي علم بالقلم، علم الإنسان مالم يعلم والصلاة والسلام على خير معلم الناس الخير محمد أما بعد:\nمقدمة: عملية كتابة الكود البرمجي تمر بعدة مراحل وهي الكتابة والتعديل والمسح و إضافة المزيد من الأكواد وهكذا، وتصل لمرحلة ما، تود أن تتراجع عن هذه التعديلات أو تريد معرفة التعديلات التي أجريت على الملف والتراجع عن تعديل بسيط مثلًا، تعتبر هذه الأشياء من أبسط الأمور التي يقدمها لك git.\n يمكن النظر له بشكل مبسط على أنه ((قاعدة بيانات Database)) أو نظام ملفات ((File System)) يقوم بتخزين العمليات التي نقوم بها على الملف أو مجموعة الملفات بحيث يمكنك العودة لتلك التعديلات في أي وقت. 1\n مخطط سير عمل Git Workflow:  يقوم المبرمج بتعديل الملفات في مجلد المشروع الذي تعمل عليه. بعد ذلك يقوم بإضافة الملفات التي تم تعديلها إلى منطقة Staging Area: وهي المنطقة التي تنتقل إليها التعديلات التي قام بها المبرمج قبل تخزينها بشكل نهائي. يقوم بعمل commit، والتي بدورها تقوم بأخذ جميع التعديلات الموجودة في Staging Area ومن ثم تخزينها بشكل دائم إلى المستودع Repository.  المتغير init: يستخدم لإنشاء مستودع ‫‪Repository‬‬ جديد، وهو المكان الي سيقوم git بتخزين قائمة التعديلات فيه للمشروع، يجب أن نكون في مجلد المشروع الرئيسي وكتابة الأمر التالي.\ngit init ملاحظة: إنشاء المستودع الفارغ لايعني أنه سيقوم بتخزين الملفات أو التعديلات في مشروعك.\nالمتغير config: إضافة معلوماتك على git، لكي يظهر هوية المستخدم الذي قام بالتعديلات:\ngit config --global user.email \u0026#34;myemail@email.com\u0026#34; git config --global user.name \u0026#34;myname\u0026#34; \nالمتغير add: يستخدم لمتابعة التعديلات على المف ونقله من حالة Untracked إلى حالة Tracked وله استخدام آخر هو نقل الملفات التي تم تعديلها من منطقة Staging Area إلى المستودع Repository بشكل دائم.\ngit add views.py git add models.py git add urls.py لمتابعة التعديلات على المجلد كامل:\ngit add . ملاحظة: سيتم متابعة التعديلات التي تجري على كافة الملفات في المجلد الحالي الذي نفذت فيه هذا الأمر.\nالمتغير status: يستخدم الأمر status لمعرفة الملفات التي تم التعديل عليها، ومعرفة الفرع branch الحالي.\ngit status \nالمتغير commit: هذا الأمر ببساطة هو الذي يلتقط الصورة أو حالة الملفات والخيار m خاص بوضع رسالة يقوم المبرمج بوضعها لتحفظ مع تلك الصورة، وهي توضح سبب التعديلات أو الخطأ الذي تم إصلاحه أو أي رسالة تبين الهدف من تلك التعديلات. أما الخيار a يستخدم لإضافة الملفات التي تم التعديل عليها إلى منطقة Staging Area ثم عمل commit للملفات ونقلها إلى المستودع Repository.\n‫‪git‬‬ ‫‪commit‬‬ ‫‪-m‬‬ ‫‪\u0026#39;My‬‬ ‫\u0026#39;‪message‬‬ ‫‪git‬‬ ‫‪commit‬‬ ‫‪-a -m‬‬ ‫‪\u0026#39;My‬‬ ‫\u0026#39;‪message \nالمتغير diff: يستخدم لإظهار التعديلات التي أجريت على الملفات الحالية ومقارنتها بآخر commit:\ngit diff \nالمتغير reset: عند استخدام add، فنحن نقوم بنقل التعديلات إلى Staging Area لتصبح جاهزة لتخزينها بشكل دائم في المستودع من خلال commit، وهنا قد يحتاج المبرمج إلى إعادتها من تلك المنطقة، أي ما قبل add، أي التراجع عن التعديلات التي قان بها المبرمج، أي تتحول حالة الملف أو مجموعة الملفات من Unstaged إلى Modified.\ngit reset HEAD models.py يمتلك المتغيير reset أحد الخيارات المسماة --hard، واستخدام هذا الخيار قد يكون خطير للغاية كونه قد يتسبب في التراجع عن التعديلات التي قمت بها ليس فقط من Staging Area بل من Repository.\nالمتغير checkout: قد تقوم بإجراء تعديلات على ملف أو مجموعة ملفات، وبعد فترة تكتشف لأي سبب أنك تريد إلغاء كل تلك التعديلات والعودة إلى الوضع التي كانت عليه تلك الملفات قبل إجراء تلك التعديلات الأخيرة أي عودة الملف لحالته لآخر commit، هنا يوفر git أسلوب مبسط لإجراء تلك العملية.\ngit checkout models.py ملاحظة: يستخدم الأمر checkout أيضًا للتنقل من Branch لآخر.\nالإنتقال لفرع موجود مسبقًا بشكل محلي:\ngit checkout {{branch_name}} إنشاء فرع Branch جديد والإنتقال إليه بشكل مباشر:\ngit checkout -b {{branch_name}} \nالمتغير branch: عرض كافة الفروع Branches الحالية للمستودع المحلي:\ngit branch عرض كافة الفروع Branches الحالية للمستودع المحلي والبعيد:\ngit branch --all git branch -a إنشاء فرع Branch جديد:\ngit branch {{branch_name}} إعادة تسمية فرع Branch:\ngit branch -m {{old_branch_name}} {{new_branch_name}} حذف فرع Branch:\ngit branch -d {{branch_name}} \nالمتغير merge: دمج فرع Branch إلى الفرع الحالي:\ngit merge {{branch_name}} \nالمتغير rm: لحذف ملف بشكل مباشر من مجلد المشروع ومن المستودع:\ngit rm models.py لحذف مجلد بشكل مباشر من المشروع ومن المستودع:\ngit rm -r utils لحذف ملف من git كمتابعة فقط، أي من Staged Area ولكن لا تريد حذفه من مجلد المشروع:\ngit rm --cached models.py \nالمتغير mv: يستخدم لنقل الملفات من مجلد إلى مكان آخر داخل مشروعك:\ngit mv {{path/to/file}} {{new/path/to/file}} يستخدم أيضًا لإعادة تسمية الملفات:\ngit mv {{filename}} {{new_filename}} \nالمتغير log: لرؤية سجل العمليات التي حدثت على المستودع الذي تعمل عليه:\ngit log سيتم عرض عدد commits التي تمت على المستودع الذي تعمل عليه، بالإضافة إلى تفاصيل كل commit من خلال عرض رقمها ومن قام بها والتاريخ والرسالة التي توضح سبب أو وصف commit، شيء مشابه لما يلي:\ncommit e524852999ed457e7e888c44f51dd9222bcb34d7 Author: Mr.Ahmed \u0026lt;xyz@gmail.com\u0026gt; Date: Mon Apr 12 22:14:11 2022 +0300   update page about.md لرؤية commits التي حدثت للمشروع بشكل مختصر:\ngit log --oneline لرؤية commits التي حدثت على ملف أو المجلد:\ngit log {{path/to/file_or_directory}} لمعرفة التفاصيل بشكل أكبر على كل commit:\ngit log -p عرض الإحصائيات بشكل مختصر:\ngit log --stat عرض معلومات لعدد محدد من commits:\ngit log -n {{number}} للبحث برسائل commits التي تحتوي على نص معين:\ngit log -i --grep {{search_string}} \nالمتغير remote: لعرض المستودعات التي نتعامل معها عن بعد:\ngit remote -v لعرض معلومات المستودع البعيد:\ngit remote show {{remote_name}} لتغير اسم مستودع بعيد:\ngit remote rename {{old_name}} {{new_name}} لحذف مستودع بعيد:\ngit remote remove {{remote_name}} لإضافة مستودع بعيد جديد:\ngit remote add {{remote_name}} {{remote_url}} لتغير رابط مستودع بعيد:\ngit remote set-url {{remote_name}} {{new_url}} \nالمتغير clone: لنسخ مشروع بشكل كامل والحصول على نسخة من المستودع بشكل خاص:\ngit clone {{remote_repository_location}} \nالمتغير pull: لتحميل نسخة التغيرات التي حصلت في المستودع البعيد مع عمل دمج لها:\ngit pull \nالمتغير push: لرفع التعديلات الموجودة في المستودع المحلي Local Repository الموجود في جهازك إلى المستودع البعيد:\ngit push {{remote_name}} {{local_branch}} \nالمتغير stash: يستخدم لحفظ حالة المستودع الحالية، قد تود حفظ حالة المشروع والإنتقال لفرع آخر Branch دون أن تقوم بعمل commit لأنك لم تنهي التعديلات الحالية فهنا بإمكانك استخدام Stash:\ngit stash ملاحظة: تستطيع تخزين أكثر من حالة.\nلمعرفة قائمة الحالات التي قمت بتخزينها لكي تساعدك في الرجوع للحالة التي تريدها:\ngit stash list للرجوع لحالة مخصصة سابقة بعد مشاهدة قائمة الحلات من خلال الأمر السابق:\ngit stash apply stash@{2} لحذف كل الحالات:\ngit stash clear \nالمتغير clean: قد تحتاج أحيانًا إلى إزالة جميع الملفات التي تكون حالتها Untracked في مشروعك وغير موجودة في ملف .gitignore:\ngit clean -f الأمر التالي نفس الأمر السابق ولكن مع حذف المجلدات:\ngit clean -f -d git clean -fd لحذف الملفات بشكل تفاعلي:\ngit clean -i لحذف المجلدات بشكل تفاعلي:\ngit clean -i -d لإظهار الملفات التي يستم حذفها ولكن دون اتخاذ أي إجراء:\ngit clean --dry-run git clean --dry-run -f  git clean -n git clean -n -f لإظهار المجلدات التي يستم حذفها ولكن دون اتخاذ أي إجراء:\ngit clean --dry-run -d git clean -n -d \nالمتغير tag: يستخدم لإنشاء تسميات للنسخ أو لإصدارات الكود.\nعرض كافة الوسوم:\ngit tag إنشاء تسمية (وسم) مع وضع رسالة:\ngit tag {{tag_name}} -m {{tag_message}} لحذف تسمية موجودة مسبقًا:\ngit tag -d {{tag_name}} \nالمراجع:  خوارزميون: المبرمجون وإدارة الشيفرات البرمجية Git. Flex Courses: دورة إدارة نسخ البرمجة باستخدام git.    خوارزميون: المبرمجون وإدارة الشيفرات البرمجية Git.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://abotyim.github.io/ar/posts/programming/git/","summary":"شرح مفصل لكيفية التعامل مع أوامر Git.","title":"إدارة الشيفرات البرمجية Git"},{"content":"بسم الله الرحمن الرحيم، الحمد لله الذي علم بالقلم، علم الإنسان مالم يعلم والصلاة والسلام على خير معلم الناس الخير محمد أما بعد:\nPandas:  Ons أنس. ArabPy. أبو بكر سليمان. Easy Programming. شرح بالعربي.  Numpy:  Ons أنس. ArabPy. محمد المالكي. Easy Programming. الأكاديمية الرقمية.  Matplotlib:  Ons أنس. ArabPy. Amjad Majid.  Seaborn:  Ons أنس.  علم البيانات:  ورشة بايثون وعلم البيانات من جامعة القاهرة. محمد عيسى: علم البيانات. Python - For DataScience. مصطفى عثمان: Python for Data Analysis. حسام الحوراني. مدرسة السايبر: تحليل البيانات. إيهاب دياب: Data Analyst Course. منصة رواق: مدخل إلى علم البيانات. Ons أنس: Data Science and Machine Learning. الصافي حجازي: علم البيانات - Data Science. مدونة بايثونات: مكتبات علم البيانات بالبايثون.  منوع:  تحليل البيانات باستخدام بايثون – سجلات الوفيات والاصابات بفيروس كورونا كمثال.   « لا يستطاع العلم براحة الجسم »\n الإمام الحافظ: يحيى بن أبي كثير   ","permalink":"https://abotyim.github.io/ar/posts/resources/data-analysis/","summary":"تحليل البيانات هو القدرة على تنظيم البيانات وترجمتها إلى معلومات مفيدة.","title":"مصادر لتعلم تحليل البيانات مع بايثون"},{"content":"بسم الله الرحمن الرحيم، الحمد لله الذي علم بالقلم، علم الإنسان مالم يعلم والصلاة والسلام على خير معلم الناس الخير محمد أما بعد:\nالمصادر المرئية: محمد شوشان:  Django Tutorials for Beginners. Django Tutorials Level 2 (REST API).  محمود أحمد:  الدليل الشامل لتعلم دجانغو 3. أساسيات برمجة المواقع. التعامل مع Class Based Views. برمجة متجر الكتروني. كيفية التعامل مع المستخدمين دجانغو 2. كلام في دجانجو. كيفية رفع مشروع دجانجو على DigitalOcean. مكتبات خاصة بدجانجو.  محمد عيسى:  Django framework python. Python Django Web. Django 2 REST API JWT CRUD.  مهدي أحمد:  Build Advanced Blog. Blog API. Django Forms. إنشاء متجر إلكتروني. Real Time Chat with Django-channels. To Do List Django 2. CRUD system using Django \u0026amp; Ajax.  أسماء الطويل:  Django Tutorial for Beginners. Django Rest Framework Tutorial.  عبد الرحمن جمال:  كورس دجانغو كامل للمتدئين. نظام إدارة مكتبة.  بايثون ارابيا فهد مناع:  ربط Django مع Elasticsearch. شرح Django celery وتنفيذ المهام بشكل async. شرح Django API Rest Framework.  منصة سطر:  Django 101. Django 102.  منوع:  شبكة علوم: Django 2. منصة برمج: برمجة تطبيقات الويب باستخدام Django. محمد النجدي: سلسلة تعلم تطوير المواقع بإستخدام جانقو. الصافي حجازي: Django. محمود رؤوف: إنشاء موقع Vezeta باستخدام Django. أكاديمية حسونة: Django. حسين الربيعي: Django. Mohammed Gh: Class Based View in Django.  المصادر المقروءة:  أكاديمية حسوب. عالم البرمجة: دورة إطار عمل جانغو. مدونة محمود أحمد.  مجتمعات جانغو العربية:  تيليغرام: جانغو. حسوب: جانغو.   « وإني وإن كنتُ الأخيرَ زمانهُ … لآتٍ بما لم تستطعهُ الأوائلُ »\n أبو العلاء المعري   ","permalink":"https://abotyim.github.io/ar/posts/resources/django/","summary":"هو إطار عمل ويب حر ومفتوح المصدر، كتب بلغة البرمجة بايثون، يهدف لتسهيل عملية تطوير مواقع الويب التي تعتمد على قواعد البيانات، ويعتبر الأمان من الأولويات القصوى له.","title":"مصادر لتعلم إطار العمل Django"},{"content":"بسم الله الرحمن الرحيم، الحمد لله الذي علم بالقلم، علم الإنسان مالم يعلم والصلاة والسلام على خير معلم الناس الخير محمد أما بعد:\nدورات شاملة:  أكاديمية الزيرو: Mastering Python. كودزيلا: Master Python from Beginner to Advanced. عبد الرحمن جمال: كورس cs50 بالعربي كامل | Cs50 Tutorial In Arabic عبد الرحمن جمال: Python for Beginners. منصة برمج: مسار بايثون. محمد عيسى: دورة Python 3 أساسيات ومتقدم. حسين الربيعي: دورة برمجة بايثون Python Tutorials Arabic. محمود أحمد: أساسيات بايثون الجزء الأول. أكاديمية حسونة: بايثون الكل. شبكة علوم: أساسيات Python. يونس: دورة بايثون. أكاديمية الخوارزميات: دورة تعلم بايثون. نور حمصي: البايثون بيتكلم عربي. فتحي العامري: دورة أساسيات Python. الصافي حجازي: Python 3 Basics. منصة رواق: مقدمة إلى برمجة الحاسب باستخدام لغة Python. المبرمج العربي: أساسيات Python. محمد شوشان: بايثون المستوى الأول. مستر ماجد: Python. Two Pi: Python course - Level 1. منصة سطر: Full-Stack Python. أكادمية حسوب: دورة تطوير التطبيقات باستخدام لغة Python مدفوعة. أكاديمية حسوب: دورة علوم الحاسب - مدفوعة. فكلس كورسز: دورة برمجة بايثون - مدفوعة.  OOP:  كودزيلا. مجتمع بايثون العربي. محمد المالكي. محمد فاضل. يونس. أكاديمية حسونة. محمود أحمد. الصافي حجازي. محمد شوشان. عبد الرحمن جمال.  Algorithms \u0026amp; Data Structures:  أكاديمية فينكس للتدريب. يونس.  PyQT:  أكاديمية الخوارزميات PyQT5. المبرمج العربي: PyQT5. محمود أحمد بناء تطبيقات ديسك توب. محمود أحمد: تصميم تطبيقات الديسك توب Qt Designer. محمود أحمد: نظام لإدارة مكتبة بفروعها. محمود أحمد: برمجة تطبيق تحميل. محمود أحمد: كيفية اضافة auto-complete. محمد شوشان.  Kivy:  محمود رؤوف. Mohamed Al-Kainai: أساسيات Kivy \u0026amp; Kivymd. Mohamed Al-Kainai: تصميم تطبيقات Kivy \u0026amp; Kivymd.  Tkinter:  أكاديمية حسونة. الصافي حجازي. حسين الربيعي. محمود رؤوف. محمد شوشان.  Database:  مهدي أحمد: Database ORM. محمود أحمد: التعامل مع الداتا بيز MySQL. محمد عيسى: قواعد البيانات. محمد شوشان: ربط الداتا بيز.  Security \u0026amp; Network:  محمد عيسى: برمجة شبكات. محمد عيسى: Nmap. محمد عيسى: Mikrotik. عبد الله السكري. مجتمع iSecur1ty: إختبار الإختراق. مدرسة السايبر: بايثون شبكات. مدرسة السايبر: سيكيورتي المستوى الأول. مدرسة السايبر: سيكيورتي المستوى الثاني. مدرسة السايبر: سيكيورتي المستوى الثالث. مدرسة السايبر: سيكيورتي المستوى الرابع.  Machine Learning:  أبو بكر سليمان: The Bedouin Way. حازم خالد محمد: AI بالعربي. عمر عز الدين: الشبكات العصبية العميقة. عمر عز الدين: Neural Network بالعربي. عمر عز الدين: AutoKRAS AutoML. عمر عز الدين: ML Projects. عبد الله نصر. عبد الله نصر: Overfitting.  Image Processing:  عمر عز الدين. حازم خالد. كريم الجزار.  Web Crawling:  أبو بكر سليمان: Selenium. أبو بكر سليمان: PyQuery. مهدي أحمد: Beautiful Soup. محمد المالكي: Selenium. مدرسة السايبر.  Data Analysis:  تحليل البيانات مع بايثون.  Flask:  تعلم Flask من Algorithm Academy. موقع شبيه تويتر من Algorithm Academy. محمد عبد السلام: Flask mega. مهدي أحمد. كتاب استكشف فلاسك. مقالات أكاديمية حسوب.  Django:  تعلم إطار العمل Django.  OS:  محمد المالكي. محمد المالكي: autopy. محمود أحمد.  Telegram:  محمد عيسى: Python \u0026amp; Telegram. Painor: تيليثون بالعربي Telethon. Telegram bot with lib Pyrogram Telegram bot with lib telebot بناء بوت تلغرام عبر pyrogram. إنشاء بوت تلغرام بلغة بايثون Bot Telegram.  منوع:  محمود أحمد: المكتبات في بايثون. محمود أحمد: برمجة المشاريع. محمود أحمد: Tips \u0026amp; Tricks. محمود أحمد: البرمجة في حياتك اليومية Automation. محمود أحمد: كيفية عمل ملف exe من كود بايثون. عبد الرحمن جمال: مكتبات بايثون. عبد الرحمن جمال: معسكر بايثون. المبرمج العربي: تطبيقات باستخدام بايثون. محمد فاضل: Bioinformatics Programming. محمد فاضل: مكتبات بايثون. يونس: Python Tips. كودزيلا: مشاريع بايثون. سلسلة مكتبات بايثونية. أكاديمية الخوارزميات: CLI Scripts. Mohammed Gh: Python3 crash course. منصة سطر: Python 101. منصة سطر: Python 102. منصة سطر: Python 103. منصة سطر: Python 104. مجتمع بايثون العربي: لغة بايثون 🐍. عبد الله نصر: التعرف على الوجوه Face recognition. كريم الجزار: إبصار الآلة مع النصوص Computer Vision with Text. كريم الجزار: مشاريع إبصار الآلة.  كتب:  أكاديمية حسوب: البرمجة بلغة بايثون. تعلم البرمجة مع بايثون 3.  مواقع:  أكاديمية حسوب: ترجمة توثيق بايثون. مدونة بايثونات. موقع هرماش. مدونة محمود أحمد. بايثون بالعربي.  مجتمعات بايثون العربية:  تيليغرام: بايثون. حسوب: بايثون.   « ليس المهم نوع المضمار الذي تسلكه، لكن المهم إذا اخترتَ مضماراً .. أن تكون بطله ! »\n عمار بن ناصر العتيبي   ","permalink":"https://abotyim.github.io/ar/posts/resources/python/","summary":"تعتبر لغة البرمجة بايثون سهلة الفهم وتتميز بالقوة والبساطة في آن واحد، وتتمتع بشيفرة سهلة القراءة، وتستخدم بشكل واسع في العديد من المجالات، وتعتبر من أسرع اللغات البرمجية تعلماً.","title":"مصادر لتعلم لغة البرمجة بايثون"},{"content":"بسم الله الرحمن الرحيم، الحمد لله الذي علم بالقلم، علم الإنسان مالم يعلم والصلاة والسلام على خير معلم الناس الخير محمد أما بعد:\nالمصادر المرئية:  Containerization من Garage Education. Docker - Build, Ship, Run - Arabic من Mohamed Rezk. Docker Practical Course من عبد العزيز الزعابي  دوكر باللغة العربية من محمد عيسى. Docker in Arabic من Ziyaad Qasem. Docker and Containers من حمد العبسي. Learn Docker مدفوعة. فيديو يشرح مقدمة في Docker. GDGMENA: مقدمة إلى تقنية الحاويات. GDGMENA: ضع تطبيقاتك في حاويات باستخدام Docker. سلسلة تعليم دوكر من صوت المبرمج. تعلم Docker. Docker For Developers Docker. ورشة تعليم دوكر بالعربي. Docker سلسلة تعلم. Docker and Kubernetes Deep Dive. Docker in arabic من arab Devops. منصة سطر: Docker 101. دوكر كونتينر - Docker container. Learn Docker from Zero من عبد الباسط بوشقري.  المصادر المسموعة:  شرح من بودكاست null++  المصادر المقروءة:  كتاب خطواتك الأولى في Docker للأخ وجدي عصام عبد الرحيم. سلسلة مقالات في أكادمية حسوب. سلسلة مقالات للأخ وجدي عصام عبد الرحيم. سلسلة مقالات مقدمة إلى Docker مقدمة من عالم البرمجة. مقال يشرح Docker Containers. مقدمة في حاويات دوكر من مايكروسوفت.   « أطلبُ العِلمَ ولا تكسَلْ فمـا \u0026hellip; أبعـدَ الخيرَ على أهـلِ الكَسَلْ »\n لامية ابن الوردي   ","permalink":"https://abotyim.github.io/ar/posts/resources/docker/","summary":"صُممت هذه التقنية لجعل عجلة تطوير البرامج وتشغيلها بشكل أسرع.","title":"مصادر لتعلم تقنية الـ Docker"},{"content":"بسم الله الرحمن الرحيم، الحمد لله الذي علم بالقلم، علم الإنسان مالم يعلم والصلاة والسلام على خير معلم الناس الخير محمد أما بعد:\nمقدمة: في هذا الدرس سنتعلم كيفية استخدام أمر find والذي يعتبر من أهم أدوات البحث في Linux، ولا يقتصر فائدته على البحث في الملفات فقط بل تستطيع تنظيم الملفات بواسطته، ومسح الملفات والمجلدات الفارغة، لا أبالغ لو قلت لك تستطيع فعل الكثير 😃\nالطريقة النحوية لكتابة الأمر find: find [options] [paths] [expression] البحث بناءً على الاسم:  -name: يستخدم للبحث عن الاسم وهو حساس لحالة الأحرف كما يقال Case sensitivity أي عندما تبحث عن كلمة Main.py هي ليست مطابقة لـ main.py. -iname: يستخدم للبحث عن الاسم أيضاًَ وهو مشابه لما سبق مع تجاهل حالة الأحرف، فعندما تبحث عن كلمة MAin.PY سيطابق اسم الملف main.py و \u0026hellip; إلخ. ملاحظة: بإمكاننا استخدام * في أي مكان من موقع الكلمة.  استخدام المعاملات المنطقية:\n -not: تعبر عن المعامل المنطقي NOT بإمكاننا استخدام -not أو ! عندما تريد العثور على كل الملفّات الّتي لا تُوافق نمطًا Pattern مُحدّدًا، في حال استخدام ! يجب تخليصها Escape حتى لا يحاول سطر الأمر تفسيرها قبل بدء عمل find. -or: تعبر عن المعامل المنطقي OR بإمكاننا استخدام -or أو -o. -and: تعبر عن المعامل المنطقي AND بإمكاننا استخدام -and أو -a. ملاحظة: في حال لم تضع OR أو AND فسيكون الخيار بشكل تلقائي AND.  البحث بواسطة اسم الملف في المجلد الحالي: find . -name main.py البحث بواسطة اسم الملف مع تجاهل حالة الأحرف: find /home -iname Main.py البحث فقط عن المجلدات: find / -type d -name Books البحث فقط عن الملفات: find . -type f -name main.py البحث عن كل الملفات ذات اللاحقة py: find . -type f -name \u0026#34;*.py\u0026#34; البحث عن كل الملفات التي تبدأ بـ mian مع استثناء اللاحقة php: find . -type f -name \u0026#34;main*\u0026#34; -not -name \u0026#34;*.php\u0026#34; البحث بناءً على عدد المجلدات الفرعية:  -mindepth: تحدد القيمة الصغرى لعدد مستويات المجلدات التي سيبدأ منها البحث، وسيتم تجاهل المجلد الحالي. -maxdepth: تحدد القيمة الكبرى لعدد مستويات المجلدات التي سينتهي فيها البحث.  البحث بعمق كحد أدنى 4 مجلدات: find /home/user -mindepth 4 البحث بعمق كحد أقصى 5 مجلدات: find /home/user -maxdepth 5 البحث عن المجلدات والملفات الفارغة وحذفها:  -type: تستخدم لتحديد النوع، لو أردنا عرض النتائج للملفات فقط نستخدم f، ونستخدم d لعرض المجلدات فقط، ونستخدم s لعرض ملفات socket. -empty: لعرض الملفات أو المجلدات الفارغة. -print: لبطاعة النتائج فقط. -delete: تستخدم للحذف.  البحث عن المجلدات الفارغة: find ~/Work -type d -empty -print حذف المجلدات الفارغة: find ~/Work -type d -empty -delete البحث عن الملفات الفارغة: find ~/Work -type f -empty -print حذف الملفات الفارغة: find ~/Work -type f -empty -delete البحث عن الملفات المخفية: find / -type f -name \u0026#34;.*\u0026#34; البحث بناءً على الأذونات: -perm: وهي اختصار لكلمة permission.\nالبحث عن الملفات ذات الأذونات 777: find . -type f -perm 0777 -print البحث عن الملفات بدون الأذونات 777: find . -type f ! -perm 0777 -print البحث عن الملفات للقراءة فقط: find / -type f -perm /u=r البحث عن الملفات التنفيذية: find / -type f -perm /a=x البحث بناءً على المالكين والمجموعات:  -user: للبحث عن الملفات التي تعود لمستخدم ما. -group: للبحث عن الملفات التي تعود لمجموعة ما. -uid: للبحث عن الملفات التي تعود لمستخدم ما بواسطة القيمة الرقمية للمالك. -gid: للبحث عن الملفات التي تعود لمجموعة ما بواسطة القيمة الرقمية للمجموعة.  البحث بناءً على المالك ahmed: find /home -user ahmed البحث بناءً على المجموعة muslim: find /home -group muslim البحث بناءً على التاريخ والوقت: يخزن لينكس بيانات عن تواريخ الوصول Access time، وتواريخ التعديل Modification، وتواريخ التّبديل Change:\n  تاريخ الوصول: آخر مرّة قُرئ من الملفّ أو كُتب فيه.\n  تاريخ التّعديل: آخر مرّة عُدِّل فيها على محتوى الملفّ.\n  تاريخ التّبديل: آخر مرّة غُيّرت فيها البيانات الوصفيّة Meta-data المُتعلّقة بوضع الملفّ ضمن نظام الملفّات.\n  -mtime: للبحث عن الملفّات الّتي عُدِّل على محتواها باليوم.\n  -mmin: للبحث عن الملفّات الّتي عُدِّل على محتواها بالدقيقة.\n  -atime: للبحث عن الملفّات المقروءة إليها باليوم.\n  -amin: للبحث عن الملفّات المقروءة بالدقيقة.\n  -ctime: للبحث عن الملفّات التي غيرت بياناتها الوصفيّة الخاصة باليوم.\n  -cmin: للبحث عن الملفّات التي غيرت بياناتها الوصفيّة الخاصة بالدقيقة.\n  ملاحظة: عند استخدام اشارة + تعني أكثر من، وعند استخدام - تعني أقل من، وعند عدم وضع أي أشارة فقط الرقم تعني المطابقة.\n  البحث عن الملفات المعدلة آخر 50 يوماً: find / -mtime -50 البحث عن الملفات المعدلة أكثر من 50 يوماً: find / -mtime +50 البحث عن الملفات المعدلة من 20 إلى 50 يوماً: find / -mtime +20 -mtime -50 البحث عن الملفات التي تم الوصول إليها آخر 50 يوماً: find / -atime -50 البحث عن الملفات التي الوصول إليها أكثر من 50 يوماً: find / -atime +50 البحث عن الملفات التي تغييرت بيانات التعريف الخاصة بها آخر 50 دقيقة: find / -cmin -50 البحث بناءً على الحجم:  c: الحجم بالبايت. k: الحجم بالكيلوبايت (1024 بت). M: الحجم بالميغابايت (1048576 بت). G: الحجم بالجيغابايت (1073741824 بت). ملاحظة: عند استخدام اشارة + تعني أكبر من، وعند استخدام - تعني أصغر من، وعند عدم وضع أي أشارة فقط الرقم تعني المطابقة.  البحث عن الملفات المطابقة للحجم 10MB: find / -size 10M البحث عن الملفات أكبر من 2MB وأصغر من 10MB: find / -size +2M -size-10M تنفيذ الأوامر على نتائج البحث: يُتيح الأمر find إمكانيّة تنفيذ أوامر على نتائج البحث مباشرةً عن طريق مُعطَى exec-.\nملاحظة: نستخدم علامة {} هي ماسك مكان Placeholder، تحلّ محلَّ الملفّات المُطابقة لخيارات البحث. تُشير علامة ;\\ إلى نهاية الأمر.\nالبحث عن الملفات الفارغة والتأكد من مساحة كل ملف: find . -type f -empty -exec du {} \\; البحث عن ملفات PDF بناء على نوع الملف: find . -type f -exec file -i {} \\; | grep -i \u0026#34;application/pdf\u0026#34; البحث عن الملفات ذات التنسيق data: find . -type f -exec file {} \\; | grep \u0026#39;\\data$\u0026#39; تنويه: تستطيع استخدام -ok بدل من -exec والفرق الوحيد بينهما أنها تعرض رسالة موافقة على تنفيذ الأمر على كل ملف، وهي مفيدة جداً في حال استخدمت أمر الحذف حتى لا تمسح أي ملف بطريقة الخطأ.\nالمراجع:  35 Practical Examples of Linux Find Command. كيف تستخدِم أمرَي find و locate للبحث عن الملفّات على Linux. البحث بواسطة الأمر find في لينكس.   ","permalink":"https://abotyim.github.io/ar/posts/linux/find/","summary":"يعتبر الأمر find من أهم أدوات البحث في لينكس.","title":"الأمر find"},{"content":"بسم الله الرحمن الرحيم، الحمد لله الذي علم بالقلم، علم الإنسان مالم يعلم والصلاة والسلام على خير معلم الناس الخير محمد أما بعد:\nمقدمة: AWK هي لغة برمجة مفسرة مصممة لمعالجة النصوص وإنشاء التقارير. يتم استخدامه عادةً لمعالجة البيانات، مثل البحث عن العناصر داخل البيانات، وإجراء العمليات الحسابية، وإعادة هيكلة البيانات الأولية لإنشاء التقارير في أنظمة التشغيل Linux.\nالاستخدامات النموذجية لـ AWK: يمكن إنجاز عدد لا يحصى من المهام باستخدام AWK، سنعرض عدد قليل من هذه الاستخدامات:\n معالجة النصوص. إنتاج تقارير نصية منسقة. إجراء عمليات حسابية. إجراء عمليات على السلاسل النصية.  طريقة عمل AWK: لكي نصبح على دراية في AWK ومعرفة قوية فأنت بحاجة إلى معرفة مكوناته الداخلية، هو يتبع سير عمل بسيط هو:\nالقراءة ⬅️ التنفيذ ⬅️ التكرار ​♻️​ يوضح المخطط Flowchart التالي سير عمل AWK:\nهنالك خمس كتل حسب المخطط Flowchart وهي:\n BEGIN: يتم تنفيذ هذه الكتلة عند بدء تشغيل البرنامج فقط، ويتم تنفيذه مرة واحدة، تعتبر هذه الكتلة اختيارية،BEGIN هي كلمة رئيسية في AWK وبالتالي يجب أن تكون بأحرف الكبيرة. Read: هذه الكتلة مهمتها قراءة سطراً واحداً من المدخلات ويخزنه في الذاكرة. Execute: تنفيذ أوامر AWK على السطر الحالي، ويكون التنفيذ حسب تسلسل الأوامر التي كتبتها. Repeat: تكرار هذه العملية وأعني كتلة Read ثم Execute وهكذا حتى يصل الملف إلى نهايته ثم ينتقل للكتلة الأخيرة. END: يتم تنفيذ هذه الكتلة في نهاية البرنامج فقط، تعتبر هذه الكتلة اختيارية، END هي كلمة رئيسية في AWK وبالتالي يجب أن تكون بأحرف كبيرة.  الطريقة النحوية لكتابة الأمر awk: awk \u0026#39;BEGIN {start_action} /pattern/ { actions } END {stop_action}\u0026#39; filename awk \u0026#39; BEGIN {start_action} /pattern/ { actions } /pattern/ { actions } .... END {stop_action} \u0026#39; filename لنقم بإنشاء ملف words.txt يحتوي على الجملة التالية فقط Hollow World! للتأكد نقوم بعرض محتويات الملف عبر الأمر cat:\ncat words.txt Hollow World! البدء باستخدام awk: طباعة محتويات الملف: awk \u0026#39;{print}\u0026#39; words.txt Hollow World! طباعة سطر قبل وبعد محتويات الملف: لنقم بتجربة استخدام الكتلة BEGIN و END عبر كتابة جملة Start Line قبل محتويات الملف و End Line بعد طباعة الملف:\nawk \u0026#39;BEGIN{printf \u0026#34;Start Line\\n\u0026#34;} {print} END{printf \u0026#34;End Line\\n\u0026#34;}\u0026#39; words.txt Start Line Hollow World! End Line ملاحظة: استخدمنا \\n لنقل مؤشر الكتابة في سطر جديد.\nكتابة البرنامج النصي في ملف منعزل: قم بإنشاء ملف نصي ليكن باسم command.awk وضع بداخله البرنامج أعلاه:\nBEGIN{printf \u0026#34;Start Line\\n\u0026#34;} {print} END{printf \u0026#34;End Line\\n\u0026#34;} الآن ما نحاول القيام به هو نفس الأمر السابق طباعة سطر قبل وبعد محتويات الملف words.txt ولكن سيكون برنامجنا مكتوب بداخل الملف command.awk:\nawk -f command.awk words.txt استخدمنا الخيار -f ﻹمكانية استدعاء مسار سكربت awk.\nطباعة الأعمدة: نقوم بإنشاء ملف نصي باسم marks.txt يحتوي على المعلومات التالية:\n1) Amit Physics 80 2) Rahul Maths 90 3) Shyam Biology 87 4) Kedar English 85 5) Hari History 89 awk -F \u0026#34; \u0026#34; \u0026#39;{print $3 \u0026#34;\\t\u0026#34; $4}\u0026#39; marks.txt Physics\t80 Maths\t90 Biology\t87 English\t85 History\t89 تم طباعة العامود الثالث والرابع فقط.\n -F للفصل بين الكلمات من خلال الفراغ space وبإمكانك تغير ذلك حسب النص المراد التعامل معه، نستطيع عدم وضع -F لأن الأمر awk بأخذ بشكل افتراضي الفراغ للفصل بين الكلمات. $0: يعبر عن الصف (السطر) بشكل كامل. $1: تعبر عن الكلمة الأولى. $2: تعبر عن الكلمة الثانية، وهكذا.  طباعة السطور التي تحتوي على حرف a: بشكل افتراضي يطبع awk جميع الأسطر التي تطابق النمط.\nملاحظة: عند عدم كتابة الأمر {print $0} يتم اتخاذ الإجراء الافتراضي وهو طباعة السجل.\nawk \u0026#39;/a/ {print $0}\u0026#39; marks.txt awk \u0026#39;/a/\u0026#39; marks.txt 2) Rahul Maths 90 3) Shyam Biology 87 4) Kedar English 85 5) Hari History 89 طباعة العمود 4 و 3 من السطور التي تحتوي على حرف a: awk \u0026#39;/a/ {print $4 \u0026#34;\\t\u0026#34; $3}\u0026#39; marks.txt 90 Maths 87 Biology 85 English 89 History طباعة عدد السطور المطابقة للبحث:  /a/: البحث في كل سطر يحتوي على حرف a, {++i}: عدد السطور المطابقة.  ملاحظة: بإمكاننا تغير اسم العداد من i إلى أي شيء نريده.\nawk \u0026#39;/a/{++i} END {print \u0026#34;Count = \u0026#34;, i}\u0026#39; marks.txt Count = 4 المتغيرات المضمنة في awk: المتغير ARGC: يشير إلى عدد المعطيات المقدمة إلى awk.\nawk \u0026#39;BEGIN {print \u0026#34;Arguments =\u0026#34;, ARGC -1 }\u0026#39; One Two Three Four المتغير ARGV: مصفوفة تخزين معطيات سطر الأوامر، فهرس المصفوفة من 0 حتى ARGC.\nawk \u0026#39;BEGIN { for (i = 0; i \u0026lt; ARGC; ++i) { printf \u0026#34;ARGV[%d] = %s\\n\u0026#34;, i, ARGV[i] } }\u0026#39; one two three four ARGV[0] = awk ARGV[1] = one ARGV[2] = two ARGV[3] = three ARGV[4] = four المتغير ENVIRON: للتعامل مع متغيرات البيئة environment variables.\nawk \u0026#39;BEGIN { print ENVIRON[\u0026#34;USER\u0026#34;] }\u0026#39; المتغير FILENAME: يمثل اسم الملف الحالي.\nawk \u0026#39;END {print FILENAME}\u0026#39; marks.txt marks.txt ملاحظة: وضعناFILENAME في بعد كتلة END حتى لا يتكرر طباعة اسم الملف بعدد سطور الملف.\nالمتغير FS: يمثل فاصل المدخلات وقيمته الافتراضية هي space. يمكنك أيضًا تغيير هذا باستخدام خيار سطر الأوامر -F، افتراضيًّا يستخدم الفواصل whitespaces (المسافات spaces، tabs، إلخ) للفصل بين الأعمدة.\nawk \u0026#39;BEGIN {print \u0026#34;FS = \u0026#34; FS}\u0026#39; | cat -vte المتغير NF: يمثل عدد الأعمدة في السطر الحالي. على سبيل المثال، يطبع المثال التالي فقط تلك الأسطر التي تحتوي على أكثر من عمودين.\necho -e \u0026#34;One Two\\nOne Two Three\\nOne Two Three Four\u0026#34; | awk \u0026#39;NF \u0026gt; 2\u0026#39; المتغير NR: يمثل رقم السطر الحالي. على سبيل المثال، يقوم المثال التالي بطباعة السطر إذا كان رقم السطر الحالي أقل من ثلاثة.\necho -e \u0026#34;One Two\\nOne Two Three\\nOne Two Three Four\u0026#34; | awk \u0026#39;NR \u0026lt; 3\u0026#39; المتغير OFS: يمثل الفاصل بين المخرجات وقيمته الافتراضية هي space.\nawk \u0026#39;BEGIN {print \u0026#34;OFS = \u0026#34; OFS}\u0026#39; | cat -vte المتغير RS: يمثل فاصل سجل المدخلات وقيمته الافتراضية هي سطر جديد.\nawk \u0026#39;BEGIN {print \u0026#34;RS = \u0026#34; RS}\u0026#39; | cat -vte المتغير RSTART: يمثل مكان المحرف الأول في النص الذي يتطابق مع كلمة البحث:\nawk \u0026#39;BEGIN { if (match(\u0026#34;One Two Three\u0026#34;, \u0026#34;Thre\u0026#34;)) { print RSTART } }\u0026#39; المتغير $0: يمثل السطر بأكمله.\nawk \u0026#39;{print $0}\u0026#39; marks.txt المتغير $n: يمثل العمود الحالي، نقوم باستبدال n بالرقم الذي نريده حسب عدد الأعمدة، ويتم الفصل بين الكلمات بناء على المتغير FS.\nawk \u0026#39;{print $3 \u0026#34;\\t\u0026#34; $4}\u0026#39; marks.txt المثال أعلاه سيقوم بطباعة العامود الثالث والرابع ويفصل بينهما بالتاب.\nالمتغير ARGIND: يمثل فهرس الملف الذي يتم معالجته حالياً.\nawk \u0026#39;{ print \u0026#34;ARGIND = \u0026#34;, ARGIND; print \u0026#34;Filename = \u0026#34;, ARGV[ARGIND] }\u0026#39; junk1 junk2 junk3 المتغير IGNORECASE: يجعل AWK غير حساس لحالة الأحرف لأجل المطابقة.\nawk \u0026#39;BEGIN{IGNORECASE = 1} /amit/\u0026#39; marks.txt 1) Amit Physics 80 المعاملات Operators: تدعم AWK الكثير من Operators حالها كحال لغات البرمجة الأخرى.\nالمعاملات الحسابية: الجمع: awk \u0026#39;BEGIN { a = 50; b = 20; print \u0026#34;(a + b) = \u0026#34;, (a + b) }\u0026#39; (a + b) = 70 قمنا بإنشاء متغير a,b وأسندنا لهم الأرقام، ومن ثم طبعنا رسالة خرج مع القيام بجمع المتغيرين مع بعضهم.\nالطرح: awk \u0026#39;BEGIN { a = 50; b = 20; print \u0026#34;(a - b) = \u0026#34;, (a - b) }\u0026#39; الضرب: awk \u0026#39;BEGIN { a = 50; b = 20; print \u0026#34;(a * b) = \u0026#34;, (a * b) }\u0026#39; القسمة: awk \u0026#39;BEGIN { a = 50; b = 20; print \u0026#34;(a / b) = \u0026#34;, (a / b) }\u0026#39; باقي القسمة: awk \u0026#39;BEGIN { a = 50; b = 20; print \u0026#34;(a % b) = \u0026#34;, (a % b) }\u0026#39; معاملات الزيادة والإنقاص: الزيادة: يتم تمثيله بـ ++ يقوم بالزيادة بمقدار 1، طريقة عمله هو إرجاع القيمة ثم الزيادة.\nawk \u0026#39;BEGIN { a = 10; b = a++; printf \u0026#34;a = %d, b = %d\\n\u0026#34;, a, b }\u0026#39; a = 11, b = 10 الزيادة المسبقة: يتم تمثيله بـ ++ يقوم بالزيادة بمقدار 1، طريقة عمله هو الزيادة ثم إرجاع القيمة المتزايدة.\nawk \u0026#39;BEGIN { a = 10; b = ++a; printf \u0026#34;a = %d, b = %d\\n\u0026#34;, a, b }\u0026#39; a = 11, b = 11 التناقص: يتم تمثيله بـ -- يقوم بعملية النقصان بمقدار 1، طريقة عمله هو إرجاع القيمة ثم الإنقاص.\nawk \u0026#39;BEGIN { a = 10; b = a--; printf \u0026#34;a = %d, b = %d\\n\u0026#34;, a, b }\u0026#39; a = 9, b = 10 التناقص المسبق: يتم تمثيله بـ -- يقوم بعملية النقصان بمقدار 1، طريقة عمله هو الإنقاص ثم إرجاع القيمة المتناقصة.\nawk \u0026#39;BEGIN { a = 10; b = --a; printf \u0026#34;a = %d, b = %d\\n\u0026#34;, a, b }\u0026#39; a = 9, b = 9 معاملات الإسناد: إسناد القيمة: awk \u0026#39;BEGIN { name = \u0026#34;Ahmed\u0026#34;; print \u0026#34;My name is\u0026#34;, name }\u0026#39; My name is Ahmed الإسناد مع الجمع: يتم تمثيله بـ +=.\nawk \u0026#39;BEGIN { cnt = 10; cnt += 10; print \u0026#34;Counter =\u0026#34;, cnt }\u0026#39; Counter = 20 الإسناد مع الطرح: يتم تمثيله بـ -=.\nawk \u0026#39;BEGIN { cnt = 100; cnt -= 10; print \u0026#34;Counter =\u0026#34;, cnt }\u0026#39; Counter = 90 الإسناد مع الضرب: يتم تمثيله بـ *=.\nawk \u0026#39;BEGIN { cnt = 10; cnt *= 10; print \u0026#34;Counter =\u0026#34;, cnt }\u0026#39; Counter = 100 الإسناد مع القسمة: يتم تمثيله بـ /=.\nawk \u0026#39;BEGIN { cnt = 100; cnt /= 5; print \u0026#34;Counter =\u0026#34;, cnt }\u0026#39; Counter = 20 الإسناد مع باقي القسمة: يتم تمثيله بـ %=.\nawk \u0026#39;BEGIN { cnt = 100; cnt %= 8; print \u0026#34;Counter =\u0026#34;, cnt }\u0026#39; Counter = 4 الإسناد مع القوة (الأس): يتم تمثيله بـ ^= أو **=.\nawk \u0026#39;BEGIN { cnt = 2; cnt ^= 4; print \u0026#34;Counter =\u0026#34;, cnt }\u0026#39; awk \u0026#39;BEGIN { cnt = 2; cnt **= 4; print \u0026#34;Counter =\u0026#34;, cnt }\u0026#39; Counter = 16 معاملات القيم المنطقية: معامل Equal to: يتم تمثيله بـ ==.\nawk \u0026#39;BEGIN { a = 10; b = 10; if (a == b) print \u0026#34;a == b\u0026#34; }\u0026#39; a == b معامل Not Equal to: يتم تمثيله بـ !=.\nawk \u0026#39;BEGIN { a = 10; b = 20; if (a != b) print \u0026#34;a != b\u0026#34; }\u0026#39; a != b معامل Less Than: يتم تمثيله بـ \u0026lt;.\nawk \u0026#39;BEGIN { a = 10; b = 20; if (a \u0026lt; b) print \u0026#34;a \u0026lt; b\u0026#34; }\u0026#39; a \u0026lt; b معامل Less Than or Equal to: يتم تمثيله بـ \u0026lt;=.\nawk \u0026#39;BEGIN { a = 10; b = 10; if (a \u0026lt;= b) print \u0026#34;a \u0026lt;= b\u0026#34; }\u0026#39; a \u0026lt;= b معامل Greater Than: يتم تمثيله بـ \u0026gt;.\nawk \u0026#39;BEGIN { a = 10; b = 20; if (b \u0026gt; a ) print \u0026#34;b \u0026gt; a\u0026#34; }\u0026#39; b \u0026gt; a معامل Greater Than or Equal to: يتم تمثيله بـ \u0026gt;=.\nawk \u0026#39;BEGIN { a = 10; b = 20; if (b \u0026gt; a ) print \u0026#34;b \u0026gt;= a\u0026#34; }\u0026#39; b \u0026gt;= a المعامل الثلاثي (إجراء الشرط في سطر واحد): الصيغة النحوية تكون كالتالي:\ncondition expression ? statement1 : statement2 يتم إختبار الشرط إن كان صحيحاً يتم تنفيذ العبارة الأولى، وإلا يتم تنفيذ العبارة الثانية.\nawk \u0026#39;BEGIN { a = 10; b = 20; (a \u0026gt; b) ? max = a : max = b; print \u0026#34;Max =\u0026#34;, max}\u0026#39; Max = 20 دمج النصوص مع بعضها: الفراغ Space هنا يمثل دمج النصوص.\nawk \u0026#39;BEGIN { str1 = \u0026#34;Hello, \u0026#34;; str2 = \u0026#34;World\u0026#34;; str3 = str1 str2; print str3 }\u0026#39; Hello, World المرور على عناصر المصفوفة: يتم تمثيله بـ in يتم استخدامه للوصول إلى عناصر المصفوفة.\nawk \u0026#39;BEGIN { arr[0] = 1; arr[1] = 2; arr[2] = 3; for (i in arr) printf \u0026#34;arr[%d] = %d\\n\u0026#34;, i, arr[i] }\u0026#39; arr[0] = 1 arr[1] = 2 arr[2] = 3 التعابير المنطقية: التعبير Dot: يستخدم لمطابقة الكلمات مع تعويض النقط. يطابق المثال التالي مع fin, fun, fan عوض النقطة بداخل الحرف المفقود من الكلمة.\necho -e \u0026#34;cat\\nbat\\nfun\\nfin\\nfan\u0026#34; | awk \u0026#39;/f.n/\u0026#39; fun fin fan التعبير Start of line: يطابق بداية السطر، يطبع المثال التالي جميع الأسطر التي تبدأ بـ The.\necho -e \u0026#34;This\\nThat\\nThere\\nTheir\\nthese\u0026#34; | awk \u0026#39;/^The/\u0026#39; There Their التعبير End of line: يطابق نهاية السطر، يطبع المثال التالي جميع الأسطر التي تنتهي بـ n.\necho -e \u0026#34;knife\\nknow\\nfun\\nfin\\nfan\\nnine\u0026#34; | awk \u0026#39;/n$/\u0026#39; fun fin fan التعبير Match character set: يتم استخدامه لمطابقة حرف واحد فقط من بين مجموعة أحرف، المثال التالي يطابق Call و Tall ولكن لا يطابق Ball.\necho -e \u0026#34;Call\\nTall\\nBall\u0026#34; | awk \u0026#39;/[CT]all/\u0026#39; Call Tall التعبير Exclusive set: عكس التعبير السابق، ينفي مجموعة الأحرف الموجودة بين قوسين مربعين، أي لن يتم مطابقتها، المثال التالي يطابق Ball فقط.\necho -e \u0026#34;Call\\nTall\\nBall\u0026#34; | awk \u0026#39;/[^CT]all/\u0026#39; Ball التعبير Alteration: يسمح الـ | بطباعة Call أو Ball أو الاثنين معاً إن توفروا في النص.\necho -e \u0026#34;Call\\nTall\\nBall\\nSmall\\nShall\u0026#34; | awk \u0026#39;/Call|Ball/\u0026#39; Call Ball التعبير Zero or More Occurrence: تستخدم * لإكمال الكلمة، في المثال التالي أي كلمة تبدأ بـ ca سيتم مطابقتها، أي الحرف اللي يسبق علامة النجمة حتى لو لم يكن موجود سيتم المطابقة.\necho -e \u0026#34;ca\\ncat\\ncatt\u0026#34; | awk \u0026#39;/cat*/\u0026#39; ca cat catt التعبير One or More Occurrence: يطابق إن كان هذا الحرف مكرر أم لا، في المثال التالي يطابق أي سطر فيه 2 سواء كتب مرة واحدة أو أكثر.\necho -e \u0026#34;111\\n22\\n123\\n234\\n456\\n222\u0026#34; | awk \u0026#39;/2+/\u0026#39; echo -e \u0026#34;111\\n22\\n123\\n234\\n456\\n222\u0026#34; | awk \u0026#39;/2/\u0026#39; 22 123 234 222 التعبير Grouping: تستخدم الأقواس () للتجميع والمحرف | يستخدم للبدائل، المثال يطابق التعبير التالي مع الأسطر التي تحتوي على Apple Juice أو Apple Cake.\necho -e \u0026#34;Apple Juice\\nApple Pie\\nApple Tart\\nApple Cake\u0026#34; | awk \u0026#39;/Apple (Juice|Cake)/\u0026#39; Apple Juice Apple Cake إعادة توجيه المخرجات: نحتاج هنا إعادة توجيه المخرجات إلى ملف نصي بدلاً من عرضه على شاشة Terminal.\nالكتابة على الملف: awk \u0026#39;BEGIN { print \u0026#34;Hello, World !!!\u0026#34; \u0026gt; \u0026#34;/tmp/message.txt\u0026#34; }\u0026#39; الإضافة على الملف: awk \u0026#39;BEGIN { print \u0026#34;Hello, World !!!\u0026#34; \u0026gt;\u0026gt; \u0026#34;/tmp/message.txt\u0026#34; }\u0026#39; إرسال الخرج إلى برنامج آخر بواسطة Pipe.\nawk \u0026#39;BEGIN { print \u0026#34;hello, world !!!\u0026#34; | \u0026#34;tr [a-z] [A-Z]\u0026#34; }\u0026#39; تنسيق المخرجات: الطباعة في سطر جديد: awk \u0026#39;BEGIN { printf \u0026#34;Hello\\nWorld\\n\u0026#34; }\u0026#39; Hello World طباعة tab بشكل أفقي: awk \u0026#39;BEGIN { printf \u0026#34;Sr No\\tName\\tSub\\tMarks\\n\u0026#34; }\u0026#39; Sr No Name Sub Marks طباعة tab بشكل عمودي: awk \u0026#39;BEGIN { printf \u0026#34;Sr No\\vName\\vSub\\vMarks\\n\u0026#34; }\u0026#39; Sr No  Name  Sub  Marks طباعة Backspace لمسح محرف للخلف: awk \u0026#39;BEGIN { printf \u0026#34;Field 1\\bField 2\\bField 3\\bField 4\\n\u0026#34; }\u0026#39; Field Field Field Field 4 الطباعة من بداية السطر: \\r: بعد الطباعة، نقوم بإرجاع مؤشر الكتابة في أول السطر ونطبع القيمة التالية فوق القيمة الحالية.\nawk \u0026#39;BEGIN { printf \u0026#34;Field 1\\rField 2\\rField 3\\rField 4\\n\u0026#34; }\u0026#39; Field 4 المراجع:  Awk Tutorial.  ","permalink":"https://abotyim.github.io/ar/posts/linux/awk/","summary":"awk هي لغة برمجة لقراءة النصوص ومعالجتها.","title":"الأمر awk"}]